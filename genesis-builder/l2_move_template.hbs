module {{name}}::{{snake name}} {
    {{#if has_fungible_asset}}
    {{#if has_eth_token_metadata}}
    use aptos_framework::fungible_asset_u256::{FungibleAsset, zero};
    {{else}}
    use aptos_framework::fungible_asset_u256::FungibleAsset;
    {{/if}}
    {{else if has_eth_token_metadata}}
    use aptos_framework::fungible_asset_u256::zero;
    {{/if}}
    {{#if has_eth_token_metadata}}use EthToken::eth_token::get_metadata;{{/if}}
    use Evm::evm::{
    {{~#if has_non_empty_args}}abi_encode_params, {{/if}}emit_evm_logs, {{#if has_evm_call}}evm_call, {{/if}}evm_view, is_result_success, EvmResult};
    use std::error;

    const ENOT_SUCCESS: u64 = 1;
    {{#each structs}}

    struct {{@key}} {
        {{#each this}}
        {{snake name}}: {{{ty}}},
        {{/each}}
    }
    {{/each}}
    {{#each functions}}

    {{#if (len inputs)}}
    struct {{pascal name}}Args {
        {{#each inputs}}
        {{snake name}}: {{{ty}}},
        {{/each}}
    }
    {{/if}}

    public fun {{snake name}}(
        {{#unless is_view}}
        caller: &signer,
        {{/unless}}
        {{#each inputs}}
        {{snake name}}: {{{ty}}},
        {{/each}}
        {{#if has_value}}
        _value: FungibleAsset,
        {{/if}}
    ): EvmResult {
        {{#if is_view}}
        {{else if has_value}}
        {{else}}
        let _value = zero(get_metadata());
        {{/if}}
        {{#if (len inputs)}}
        let arg_struct = {{pascal name}}Args {
            {{#each inputs}}
            {{snake name}},
            {{/each}}
        };

        let data = abi_encode_params(
            vector{{selector}},
            arg_struct,
        );
        {{else}}
        let data = vector{{selector}};
        {{/if}}

        {{#if is_view}}
        let result = evm_view(@0x0, @{{../name}}, 0, data);
        {{else}}
        let result = evm_call(caller, @{{../name}}, _value, data);
        {{/if}}
        assert!(is_result_success(&result), error::aborted(ENOT_SUCCESS));
        emit_evm_logs(&result);
        result
    }
    {{/each}}
}
