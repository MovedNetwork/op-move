use {
    crate::{
        primitives::{Address, Bytes, B2048, B256, U256},
        types::transactions::ExtendedTxEnvelope,
    },
    alloy::{primitives::hex, rlp::RlpEncodable},
    std::fmt::Debug,
};

pub trait BlockRepository: Debug {
    fn add(&mut self, block: ExtendedBlock);
    fn by_hash(&self, hash: B256) -> Option<ExtendedBlock>;
}

#[derive(Debug, Clone)]
pub struct ExtendedBlock {
    /// The block hash is the output of keccak-256 algorithm with RLP encoded block header as input.
    pub hash: B256,
    /// The block value is total value in Wei expected to be received by the fee recipient. It is
    /// the gas paid on top of the base fee.
    ///
    /// The base fee is burned to prevent malicious behavior.
    ///
    /// Burning the base fee hinders a block producer's ability to manipulate transactions. For
    /// example, if block producers received the base fee, they could include their own transactions
    /// for free and raise the base fee for everyone else. Alternatively, they could refund the base
    /// fee to some users off-chain, leading to a more opaque and complex transaction fee market.
    pub value: U256,
    pub block: Block,
}

impl ExtendedBlock {
    pub fn new(hash: B256, value: U256, block: Block) -> Self {
        Self { hash, value, block }
    }

    pub fn with_value(mut self, value: U256) -> Self {
        self.value = value;
        self
    }
}

/// TODO: Add withdrawals
#[derive(Debug, Clone, Default)]
pub struct Block {
    pub header: Header,
    pub transactions: Vec<ExtendedTxEnvelope>,
}

impl Block {
    pub fn new(header: Header, transactions: Vec<ExtendedTxEnvelope>) -> Self {
        Self {
            header,
            transactions,
        }
    }

    pub fn with_hash(self, hash: B256) -> ExtendedBlock {
        ExtendedBlock::new(hash, U256::ZERO, self)
    }
}

/// A subset of the `Header` fields that are available while the transactions
/// in the block are being executed.
#[derive(Debug, Clone, Default)]
pub struct HeaderForExecution {
    pub number: u64,
    pub timestamp: u64,
    pub prev_randao: B256,
}

#[derive(Debug, Clone, Default, RlpEncodable)]
pub struct Header {
    /// The Keccak 256-bit hash of the parent block’s header, in its entirety; formally `H_p`.
    pub parent_hash: B256,
    /// A 256-bit hash field that is now deprecated due to the replacement of proof of work
    /// consensus. It is now to a constant, `KEC(RLP(()))`; formally `H_o`.
    pub(crate) ommers_hash: B256,
    /// The 160-bit address to which priority fees from this block are transferred; formally `H_c`.
    pub beneficiary: Address,
    /// The Keccak 256-bit hash of the root node of the state trie, after all transactions and
    /// withdrawals are executed and finalised; formally `H_r`.
    pub state_root: B256,
    /// The Keccak 256-bit hash of the root node of the trie structure populated with each
    /// transaction in the transactions list portion of the block; formally `H_t`.
    pub(crate) transactions_root: B256,
    /// The Keccak 256-bit hash of the root node of the trie structure populated with the receipts
    /// of each transaction in the transactions list portion of the block; formally `H_e`.
    pub receipts_root: B256,
    /// The Bloom filter composed of indexable information (logger address and log topics) contained
    /// in each log entry from the receipt of each transaction in the transactions list; formally
    /// `H_b`.
    pub logs_bloom: B2048,
    /// A scalar field that is now deprecated due to the replacement of proof of work consensus. It
    /// is set to 0; formally `H_d`.
    pub(crate) difficulty: U256,
    /// A scalar value equal to the number of ancestor blocks. The genesis block has a number of
    /// zero; formally `H_i`.
    pub number: u64,
    /// A scalar value equal to the current limit of gas expenditure per block; formally `H_l`.
    pub gas_limit: u64,
    /// A scalar value equal to the total gas used in transactions in this block; formally `H_g`.
    pub gas_used: u64,
    /// A scalar value equal to the reasonable output of Unix’s time() at this block’s inception;
    /// formally `H_s`.
    pub timestamp: u64,
    /// An arbitrary byte array containing data relevant to this block. This must be 32 bytes or
    /// fewer; formally `H_x`.
    pub extra_data: Bytes,
    /// The latest RANDAO mix of the post beacon state of the previous block; formally `H_a`
    ///
    /// RANDAO is a pseudorandom value generated by validators on the Ethereum consensus layer.
    /// Refer to the [consensus layer specs](https://github.com/ethereum/consensus-specs) for more
    /// detail on RANDAO.
    pub prev_randao: B256,
    /// A 64-bit value that is now deprecated due to the replacement of proof of work consensus. It
    /// is set to 0; formally `H_n`.
    pub(crate) nonce: u64,
    /// A scalar value equal to the amount of wei that is burned for each unit of gas consumed;
    /// formally `H_f`
    pub base_fee_per_gas: U256,
    /// The Keccak 256-bit hash of the root node of the trie structure populated with each
    /// withdrawal operations pushed by the consensus layer for this block; formally `H_w`.
    pub(crate) withdrawals_root: B256,
    /// The total amount of blob gas consumed by the transactions within the block, added in
    /// EIP-4844.
    pub blob_gas_used: u64,
    /// A running total of blob gas consumed in excess of the target, prior to the block. Blocks
    /// with above-target blob gas consumption increase this value, blocks with below-target blob
    /// gas consumption decrease it (bounded at 0). This was added in EIP-4844.
    pub excess_blob_gas: u64,
    /// The hash of the parent beacon block's root is included in execution blocks, as proposed by
    /// EIP-4788.
    ///
    /// This enables trust-minimized access to consensus state, supporting staking pools, bridges,
    /// and more.
    ///
    /// The beacon roots contract handles root storage, enhancing Ethereum's functionalities.
    pub parent_beacon_block_root: B256,
}

impl Header {
    /// The value of `KEC(RLP(()))`.
    const OMMERS_HASH: B256 = B256::new(hex!(
        "1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347"
    ));

    /// Creates a new [`Header`] identified by `number` and `parent_hash`. Legacy attributes such as
    /// nonce are set to the constant values as described by the Ethereum specification. Rest of the
    /// attributes are set to their [`Default`] values.
    pub fn new(parent_hash: B256, number: u64) -> Self {
        Self {
            parent_hash,
            number,
            difficulty: U256::from(0u64),
            ommers_hash: Self::OMMERS_HASH,
            nonce: 0,
            ..Default::default()
        }
    }

    pub fn with_state_root(mut self, state_root: B256) -> Self {
        self.state_root = state_root;
        self
    }

    pub fn with_transactions_root(mut self, transactions_root: B256) -> Self {
        self.transactions_root = transactions_root;
        self
    }

    pub fn with_base_fee_per_gas(mut self, base_fee_per_gas: U256) -> Self {
        self.base_fee_per_gas = base_fee_per_gas;
        self
    }
}
